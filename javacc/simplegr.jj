/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. simplegr.jj */
/*@egen*/options {
              
  STATIC=false;
                         
                                              
}

PARSER_BEGIN(SimpleGrParser)
package de.ka.simplegr.parser;

public class SimpleGrParser/*@bgen(jjtree)*/implements SimpleGrParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSimpleGrParserState jjtree = new JJTSimpleGrParserState();

/*@egen*/
  /**
   * Returns the root node of the AST.  
   * It only makes sense to call this after a successful parse. 
   * @return the root node
   */
  public Node rootNode() {
    return jjtree.rootNode();
  } 
}

PARSER_END(SimpleGrParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN:
{
   <NumberLit: (<Digit>)+ "." (<Digit>)+ | "." (<Digit>)+ >
  |<BooleanLit: "TRUE" | "FALSE" >
  |<StringLit: "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"">
  |<Null: "NULL" >
  |<And: "AND" >
  |<Or: "OR" >
  |<Not: "NOT">
  |<Identifier: <Letter> (<Letter>|<Digit>|"_")* >
  |<Equal: "==">
  |<NotEqual: "!=">
  |<LessThan: "<">
  |<LessEqualThan: "<=">
  |<GreaterThan: ">">
  |<GreaterEqualThan: ">=">
  |<Plus: "+">
  |<Minus: "-">
  |<Div: "/">
  |<Mult: "*">
  |<Open: "(">
  |<Close: ")">
  |<Comma: ",">
}

TOKEN:
{
  < #Letter: [ "a"-"z", "A"-"Z" ] >
|
  < #Digit: [ "0"-"9"] >
}


/*
 * Start parsing from here.
 */
void parse() :
{}
{
   Expression()
   <EOF>
}

/*
 * Expression.
 */
void Expression() :
{}
{
  BoolOrExpr()
}

void BoolOrExpr() :
{}
{
  BoolAndExpr() ( <Or>/*@bgen(jjtree) #BoolOrExpr( 2) */
                       {
                         ASTBoolOrExpr jjtn001 = new ASTBoolOrExpr(JJTBOOLOREXPR);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ BoolAndExpr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/                )*
}

void BoolAndExpr() :
{}
{
  EqualsExpr() ( <And>/*@bgen(jjtree) #BoolAndExpr( 2) */
                       {
                         ASTBoolAndExpr jjtn001 = new ASTBoolAndExpr(JJTBOOLANDEXPR);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ EqualsExpr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/                 )*
}


/** Equality expression. */
void EqualsExpr() :
{}
{
  RelationalExpr()
  (
     <Equal>/*@bgen(jjtree) #BoolEqualsExpr( 2) */
             {
               ASTBoolEqualsExpr jjtn001 = new ASTBoolEqualsExpr(JJTBOOLEQUALSEXPR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ RelationalExpr()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/                   
   |
     <NotEqual>/*@bgen(jjtree) #BoolNotEqualsExpr( 2) */
                {
                  ASTBoolNotEqualsExpr jjtn002 = new ASTBoolNotEqualsExpr(JJTBOOLNOTEQUALSEXPR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ RelationalExpr()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/                      
  )*
}

/** Relational expression. */
void RelationalExpr() :
{}
{
  AdditiveExpr()
  (
    <LessThan>/*@bgen(jjtree) #BoolLessThanExpr( 2) */
               {
                 ASTBoolLessThanExpr jjtn001 = new ASTBoolLessThanExpr(JJTBOOLLESSTHANEXPR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/                     
   |
    <GreaterThan>/*@bgen(jjtree) #BoolGreaterThanExpr( 2) */
                  {
                    ASTBoolGreaterThanExpr jjtn002 = new ASTBoolGreaterThanExpr(JJTBOOLGREATERTHANEXPR);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/                        
   |
    <LessEqualThan>/*@bgen(jjtree) #BoolLessThanOrEqualsExpr( 2) */
                    {
                      ASTBoolLessThanOrEqualsExpr jjtn003 = new ASTBoolLessThanOrEqualsExpr(JJTBOOLLESSTHANOREQUALSEXPR);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
                    } catch (Throwable jjte003) {
                      if (jjtc003) {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte003 instanceof RuntimeException) {
                        throw (RuntimeException)jjte003;
                      }
                      if (jjte003 instanceof ParseException) {
                        throw (ParseException)jjte003;
                      }
                      throw (Error)jjte003;
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003,  2);
                      }
                    }
/*@egen*/                             
   |
    <GreaterEqualThan>/*@bgen(jjtree) #BoolGreaterThanOrEqualsExpr( 2) */
                       {
                         ASTBoolGreaterThanOrEqualsExpr jjtn004 = new ASTBoolGreaterThanOrEqualsExpr(JJTBOOLGREATERTHANOREQUALSEXPR);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte004) {
                         if (jjtc004) {
                           jjtree.clearNodeScope(jjtn004);
                           jjtc004 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte004 instanceof RuntimeException) {
                           throw (RuntimeException)jjte004;
                         }
                         if (jjte004 instanceof ParseException) {
                           throw (ParseException)jjte004;
                         }
                         throw (Error)jjte004;
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004,  2);
                         }
                       }
/*@egen*/                                
  )*
}

void AdditiveExpr() :
{}
{
  MultiplicativeExpr()
  (
    <Plus>/*@bgen(jjtree) #NumAddExpr( 2) */
           {
             ASTNumAddExpr jjtn001 = new ASTNumAddExpr(JJTNUMADDEXPR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ MultiplicativeExpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/               
   |
    <Minus>/*@bgen(jjtree) #NumSubstrExpr( 2) */
            {
              ASTNumSubstrExpr jjtn002 = new ASTNumSubstrExpr(JJTNUMSUBSTREXPR);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ MultiplicativeExpr()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/                  
  )*
}

void MultiplicativeExpr() :
{}
{
  UnaryExpr()
  (
    <Mult>/*@bgen(jjtree) #NumMulExpr( 2) */
           {
             ASTNumMulExpr jjtn001 = new ASTNumMulExpr(JJTNUMMULEXPR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/               
   |
    <Div>/*@bgen(jjtree) #NumDivExpr( 2) */
          {
            ASTNumDivExpr jjtn002 = new ASTNumDivExpr(JJTNUMDIVEXPR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/               
  )*
}


void UnaryExpr() :
{}
{
  <Not>/*@bgen(jjtree) #BoolNotExpr( 1) */
        {
          ASTBoolNotExpr jjtn001 = new ASTBoolNotExpr(JJTBOOLNOTEXPR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/                
  |
  PrimaryExpr()
}

/** Primary expression. */
void PrimaryExpr() :
{}
{
	  LOOKAHEAD(2)
	  Function() 
	|
	  Variable()
   	|
      Literal()
	|
   	  <Open> Expression() <Close>
 }

/** An Id. */
void Variable()          :
{/*@bgen(jjtree) Variable */
   ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) Variable */
    try {
/*@egen*/
    t = <Identifier>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/  { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** An Id. */
void Function()          :
{/*@bgen(jjtree) FuncExpr */
   ASTFuncExpr jjtn000 = new ASTFuncExpr(JJTFUNCEXPR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) FuncExpr */
   try {
/*@egen*/
   t = <Identifier> Parameters()/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/  { jjtn000.setName(t.image);}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
 
void Parameters():
{
}
{
    <Open> [Expression() (<Comma> Expression())*] <Close>
}
/** A literal. */
void Literal() :
{
   Token t;
}
{/*@bgen(jjtree) NumberLiteral */
         {
           ASTNumberLiteral jjtn001 = new ASTNumberLiteral(JJTNUMBERLITERAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 (
	  t=<NumberLit>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/
	    {
	       jjtn001.setValue(Double.parseDouble(t.image));
	    }
	 )/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/              
	|/*@bgen(jjtree) BooleanLiteral */
         {
           ASTBooleanLiteral jjtn002 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
         }
         try {
/*@egen*/
	 (
	  t=<BooleanLit>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn002, true);
              jjtc002 = false;
            }
/*@egen*/
	    {
	       jjtn002.setValue(Boolean.parseBoolean(t.image.toLowerCase()));
	    }
	 )/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
           }
         }
/*@egen*/               
	|/*@bgen(jjtree) StringLiteral */
         {
           ASTStringLiteral jjtn003 = new ASTStringLiteral(JJTSTRINGLITERAL);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
         }
         try {
/*@egen*/
	 (
	  t=<StringLit>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn003, true);
              jjtc003 = false;
            }
/*@egen*/
	    {
	       jjtn003.setValue(t.image);
	    }
	 )/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
           }
         }
/*@egen*/              
	 |/*@bgen(jjtree) NullExpr */
         {
           ASTNullExpr jjtn004 = new ASTNullExpr(JJTNULLEXPR);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
         }
         try {
/*@egen*/
	 (
	  t=<Null>
	 )/*@bgen(jjtree)*/
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004, true);
           }
         }
/*@egen*/         
}